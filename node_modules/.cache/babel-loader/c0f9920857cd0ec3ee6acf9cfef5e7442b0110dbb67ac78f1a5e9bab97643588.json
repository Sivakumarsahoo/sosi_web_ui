{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KIIT\\\\OneDrive\\\\Desktop\\\\Project\\\\sosi_web_ui\\\\src\\\\pages\\\\reRenderPage\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport { Box, Button } from \"@mui/material\";\nimport React, { useState } from \"react\";\nimport RandomQuotes from \"../../component/RandomQuotes/index.tsx\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ReRenderPage = () => {\n  _s();\n  const [click, setClick] = useState(0);\n  const [quote, setQuote] = useState(\"Random\");\n  const quotes = [\"The only limit to our realization of tomorrow is our doubts of today.\", \"The future belongs to those who believe in the beauty of their dreams.\", \"In the end, we will remember not the words of our enemies, but the silence of our friends.\"];\n  useEffect(() => {\n    const index = Math.floor(Math.random() * 3);\n    setQuote(quotes[index]);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"ReRenderPage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This is the ReRenderPage component.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RandomQuotes, {\n        setClick: setClick,\n        quote: quote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: () => {\n          setClick(prev => prev += 1);\n        },\n        children: \"Click me not to render quote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          padding: \"1rem\",\n          backgroundColor: \"greenyellow\"\n        },\n        children: click\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(ReRenderPage, \"4eSvbIeZZoKxo3LJpiSagklNyd8=\");\n_c = ReRenderPage;\nexport default ReRenderPage;\nvar _c;\n$RefreshReg$(_c, \"ReRenderPage\");","map":{"version":3,"names":["Box","Button","React","useState","RandomQuotes","jsxDEV","_jsxDEV","Fragment","_Fragment","ReRenderPage","_s","click","setClick","quote","setQuote","quotes","useEffect","index","Math","floor","random","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","onClick","prev","sx","padding","backgroundColor","_c","$RefreshReg$"],"sources":["C:/Users/KIIT/OneDrive/Desktop/Project/sosi_web_ui/src/pages/reRenderPage/index.tsx"],"sourcesContent":["import { Box, Button } from \"@mui/material\";\r\nimport React, { useState } from \"react\";\r\n\r\nimport RandomQuotes from \"../../component/RandomQuotes/index.tsx\";\r\n\r\nconst ReRenderPage = () => {\r\n  const [click, setClick] = useState<number>(0);\r\n    const [quote, setQuote] = useState<string>(\"Random\");\r\n  \r\n    const quotes = [\r\n      \"The only limit to our realization of tomorrow is our doubts of today.\",\r\n      \"The future belongs to those who believe in the beauty of their dreams.\",\r\n      \"In the end, we will remember not the words of our enemies, but the silence of our friends.\",\r\n    ];\r\n    useEffect(() => {\r\n      const index = Math.floor(Math.random() * 3);\r\n      setQuote(quotes[index]);\r\n    }, []);\r\n  return (\r\n    <>\r\n      <Box>\r\n        <h1>ReRenderPage</h1>\r\n        <p>This is the ReRenderPage component.</p>\r\n        <RandomQuotes setClick={setClick} quote={quote}/>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            setClick((prev) => (prev += 1));\r\n          }}\r\n        >\r\n          {\"Click me not to render quote\"}\r\n        </Button>\r\n        <Box sx={{ padding: \"1rem\", backgroundColor: \"greenyellow\" }}>\r\n          {click}\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\nexport default ReRenderPage;\r\n"],"mappings":";;AAAA,SAASA,GAAG,EAAEC,MAAM,QAAQ,eAAe;AAC3C,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,OAAOC,YAAY,MAAM,wCAAwC;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAElE,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAS,CAAC,CAAC;EAC3C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAS,QAAQ,CAAC;EAEpD,MAAMY,MAAM,GAAG,CACb,uEAAuE,EACvE,wEAAwE,EACxE,4FAA4F,CAC7F;EACDC,SAAS,CAAC,MAAM;IACd,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3CN,QAAQ,CAACC,MAAM,CAACE,KAAK,CAAC,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EACR,oBACEX,OAAA,CAAAE,SAAA;IAAAa,QAAA,eACEf,OAAA,CAACN,GAAG;MAAAqB,QAAA,gBACFf,OAAA;QAAAe,QAAA,EAAI;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrBnB,OAAA;QAAAe,QAAA,EAAG;MAAmC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC1CnB,OAAA,CAACF,YAAY;QAACQ,QAAQ,EAAEA,QAAS;QAACC,KAAK,EAAEA;MAAM;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eACjDnB,OAAA,CAACL,MAAM;QACLyB,OAAO,EAAC,WAAW;QACnBC,OAAO,EAAEA,CAAA,KAAM;UACbf,QAAQ,CAAEgB,IAAI,IAAMA,IAAI,IAAI,CAAE,CAAC;QACjC,CAAE;QAAAP,QAAA,EAED;MAA8B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC,eACTnB,OAAA,CAACN,GAAG;QAAC6B,EAAE,EAAE;UAAEC,OAAO,EAAE,MAAM;UAAEC,eAAe,EAAE;QAAc,CAAE;QAAAV,QAAA,EAC1DV;MAAK;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC,gBACN,CAAC;AAEP,CAAC;AAACf,EAAA,CAjCID,YAAY;AAAAuB,EAAA,GAAZvB,YAAY;AAkClB,eAAeA,YAAY;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}